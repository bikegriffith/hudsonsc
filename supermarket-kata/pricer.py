"""
Template generated by $HOME/.vim/templates/py.tpl
"""

__id__ = "$Id: $"

from decimal import Decimal

class _DataObject(object):

    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)


class Item(_DataObject):

    name = None
    strategy = None
    pricing = None
    sku = None


class Pricing(_DataObject):

    base_price = None
    unit = None
    price_range = None


class StrategyInterface(object):

    def price_for(self, pricing, units):
        raise NotImplementedError

    def discount_for(self, total_units):
        """ Given a total number of units in the cart, return a discount """
        return 0


class BasePricePerUnitStrategy(StrategyInterface):

    def price_for(self, pricing, units):
        return pricing.base_price * units


class BasePriceWithDiscountAfterXItems(BasePricePerUnitStrategy, _DataObject):

    discount = None
    break_point = None

    def discount_for(self, total_units):
        if total_units % self.break_point == 0:
            return self.discount * total_units


class InventoryAdapter(object):

    def __init__(self):
        self.inventory = {
        'chips': Item(name='Chips',
                      strategy=BasePricePerUnitStrategy(),
                      pricing=Pricing(base_price=Decimal('3.00'), unit='each'),
                      sku=10001),
        'apples': Item(name='Apples ($2/lb)',
                      strategy=BasePricePerUnitStrategy(),
                      pricing=Pricing(base_price=Decimal('2.00'), unit='lb'),
                      sku=10002),
        'cereal': Item(name='Cereal',
                      strategy=BasePriceWithDiscountAfterXItems(discount=Decimal('0.50'), break_point=4),
                      pricing=Pricing(base_price=Decimal('3.00'), unit='each'),
                      sku=10003),
        'ice cream': Item()
        }

    def by_sku(self, sku):
        return [item for item in self.inventory.values() if item.sku == sku][0]

    def by_name(self, name):
        return self.inventory[name]


class Register(object):

    def __init__(self, inventory_adapter):
        self.items = []
        self.inventory_adapter = inventory_adapter

    def add_item(self, sku, units=1):
        """ @param sku
            @param units (either quantity or weight in pounds)
        """
        item = self.inventory_adapter.by_sku(sku)
        self.items.append((units, item))

    def print_receipt(self):
        output = []
        total = Decimal(0)
        total_units = {}
        total_discounts = {}
        for units, item in self.items:
            price = item.strategy.price_for(item.pricing, units)
            total += price
            output.append('%s  $%s' % (item.name, price))

            current_total = total_units.setdefault(item.sku, 0)
            total_units[item.sku] += units
            discount = item.strategy.discount_for(total_units[item.sku])
            if discount:
                total_discount = total_discounts.setdefault(item.sku, 0)
                this_discount = discount - total_discount
                total_discounts[item.sku] += discount
                total -= this_discount
                output.append('* Discount  -$%s' % this_discount)
        output.append('------------')
        output.append('Total  $%s' % total)
        print "\n".join(output)
        return "\n".join(output)


##########################
##########################
## Tests


from nose import tools as NT

class TestPricingOneItem(object):

    def setup(self):
        self.inventory = InventoryAdapter()
        self.register = Register(self.inventory)
        self.chips = self.inventory.by_name('chips')
        self.apples = self.inventory.by_name('apples')
        self.cereal = self.inventory.by_name('cereal')

    def test_should_price_1_bag_of_chips_at_3(self):
        self.register.add_item(self.chips.sku, 1)
        receipt = self.register.print_receipt()
        NT.assert_equals(receipt, "Chips  $3.00\n"\
                                  "------------\n"\
                                  "Total  $3.00")

    def test_should_price_2_bags_of_chips_at_6(self):
        self.register.add_item(self.chips.sku, 1)
        self.register.add_item(self.chips.sku, 1)
        receipt = self.register.print_receipt()
        NT.assert_equals(receipt, "Chips  $3.00\n"\
                                  "Chips  $3.00\n"\
                                  "------------\n"\
                                  "Total  $6.00")

    def test_should_price_apples_at_2_dollars_per_pound(self):
        self.register.add_item(self.apples.sku, 3)
        self.register.add_item(self.apples.sku, 1)
        receipt = self.register.print_receipt()
        NT.assert_equals(receipt, "Apples ($2/lb)  $6.00\n"\
                                  "Apples ($2/lb)  $2.00\n"\
                                  "------------\n"\
                                  "Total  $8.00")

    def test_should_price_cereal_at_3_if_less_than_4_total(self):
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        receipt = self.register.print_receipt()
        NT.assert_equals(receipt, "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "------------\n"\
                                  "Total  $9.00")

    def test_should_discount_cereal_after_4th_is_added(self):
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        receipt = self.register.print_receipt()
        NT.assert_equals(receipt, "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "* Discount  -$2.00\n"\
                                  "------------\n"\
                                  "Total  $10.00")

    def test_should_discount_cereal_after_4th_is_added_and_again_after_8th(self):
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        self.register.add_item(self.cereal.sku, 1)
        receipt = self.register.print_receipt()
        NT.assert_equals(receipt, "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "* Discount  -$2.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "Cereal  $3.00\n"\
                                  "* Discount  -$2.00\n"\
                                  "------------\n"\
                                  "Total  $20.00")

